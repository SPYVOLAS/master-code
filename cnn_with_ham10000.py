# -*- coding: utf-8 -*-
"""CNN with HAM10000.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_grWUITM2l-FJpChK_jfYsHRJ4yDinNX
"""

from google.colab import drive
drive.mount("/content/gdrive")

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import cv2
from PIL import Image
import os
from glob import glob
from sklearn.preprocessing import LabelEncoder
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import pickle
from sklearn.metrics import confusion_matrix
# %matplotlib inline

import keras
from keras.models import Sequential
from keras.utils.np_utils import to_categorical
from keras.layers import Conv2D, MaxPool2D, Dropout, Flatten, Dense, BatchNormalization
from tensorflow.keras.optimizers import Adam

metadata = pd.read_csv("/content/gdrive/MyDrive/HAM10000_metadata")
test_metadata2 = pd.read_csv("/content/gdrive/MyDrive/test_metadata2.csv")
train_metadata2 = pd.read_csv("/content/gdrive/MyDrive/train_metadata2.csv")
train_data = "/content/gdrive/MyDrive/train_2"
test_data = "/content/gdrive/MyDrive/val_2"

print(metadata['dx_type'].value_counts())

print(metadata["dx"].value_counts())

fig = plt.figure(figsize=(30,20))
ax1 = fig.add_subplot(221)
metadata["dx_type"].value_counts().plot(kind = 'bar', ax = ax1)
ax1.set_ylabel('Συνολικός αριθμός περιπτώσεων')
ax1.set_xlabel('Τρόπος διάγνωσης')
ax1.set_title('Μέθοδοι Διάγνωσης Δερματικών Βλαβών');

#converting class values from text to numerical
le = LabelEncoder()
train_metadata2["Label"] = le.fit_transform(train_metadata2["Class"])

#Getting the path of an image and assign it in a new column to the corrensponding Image ID of train_metadata csv
image_path = []
df = train_metadata2.drop(['Class', 'Label'], axis = 1)
for image in df['Image ID']:
  img =os.path.join(train_data, image)
  image_path.append(img)

train_metadata2['Path'] = image_path
print(train_metadata2.head())

#converting class values from text to numerical
le = LabelEncoder()
test_metadata2["Label"] = le.fit_transform(test_metadata2["Class"])

#Getting the path of an image and assign it in a new column to the corrensponding Image ID of train_metadata csv
image_path = []
df = test_metadata2.drop(['Class', 'Label'], axis = 1)
for image in df['Image ID']:
  img =os.path.join(test_data, image)
  image_path.append(img)

test_metadata2['Path'] = image_path
print(test_metadata2.head())

#before data augmentation
fig = plt.figure(figsize=(30,20))
ax1 = fig.add_subplot(221)
metadata["dx"].value_counts().plot(kind = 'bar', ax = ax1)
ax1.set_ylabel('Count', fontsize=14, weight="bold")
ax1.set_xlabel('Skin Lesion Type', fontsize=14, weight="bold")
ax1.set_title('Lesion Type - Distribution', fontsize=16, weight="bold");

#Lesion Dictionary
lesion_type_dict = {
    'nv': 'Melanocytic nevi',
    'mel': 'Melanoma',
    'bkl': 'Benign keratosis-like lesions ',
    'bcc': 'Basal cell carcinoma',
    'akiec': 'Actinic keratoses',
    'vasc': 'Vascular lesions',
    'df': 'Dermatofibroma'
}

#visualize the distribution of melanoma cases between ages for both sexes
metadata['cell_type'] = metadata['dx'].map(lesion_type_dict.get) 

skin_mel = metadata.loc[:,['age','sex','localization','cell_type']]
skin_mel = skin_mel[skin_mel['cell_type'] == 'Melanoma']

plt.figure(figsize=(13,7))
sns.set(style="ticks", font_scale = 1)
ax = sns.countplot(data = skin_mel,x='age',palette="Blues_d", hue = 'sex')
sns.despine(top=True, right=True, left=True, bottom=False)
plt.xticks(rotation=0,fontsize = 12)
ax.set_xlabel('Age',fontsize = 14,weight = 'bold')
ax.set_ylabel('Count',fontsize = 14,weight = 'bold')
plt.title('Age Distribution - Melanoma', fontsize = 16,weight = 'bold');

#visualize the melanoma distribution between different sexes
plt.figure(figsize=(20,8))
sns.set(style="ticks", font_scale = 1)
ax = sns.countplot(data = skin_mel,x='sex',palette="Blues_d")
sns.despine(top=True, right=True, left=True, bottom=False)
plt.xticks(rotation=0,fontsize = 12)
ax.set_xlabel('Gender',fontsize = 14,weight = 'bold')
ax.set_ylabel('Count',fontsize = 14,weight = 'bold')
plt.title('Melanoma - Malignant Cancer per Gender', fontsize = 16,weight = 'bold');

#transform images of train dataset to numpy array and assign to a new column of train_metadata csv
train_metadata2['Image'] = train_metadata2['Path'].map(lambda x: np.asarray(Image.open(x).resize((100,75))))

train_metadata2.to_pickle("/content/gdrive/MyDrive/TrainMetadata2.pkl")

output1 = pd.read_pickle("/content/gdrive/MyDrive/TrainMetadata2.pkl")

print(output1.head())

#Convert dataframe column of images into numpy array
X_train = np.asarray(output1['Image'].tolist())

X_train = X_train/255.

#transform images of test dataset to numpy array and assign to a new column of train_metadata csv
test_metadata2['Image'] = test_metadata2['Path'].map(lambda x: np.asarray(Image.open(x).resize((100,75))))

test_metadata2.to_pickle("/content/gdrive/MyDrive/TestMetadata2.pkl")

output2 = pd.read_pickle("/content/gdrive/MyDrive/TestMetadata2.pkl")

#Convert dataframe column of images into numpy array
X_test = np.asarray(output2['Image'].tolist())

# Scale values to 0-1. 
X_test = X_test/255.

Y_train = train_metadata2["Label"]
Y_test = test_metadata2["Label"]
Y_train_cat = to_categorical(Y_train, num_classes = 7)
Y_test_cat = to_categorical(Y_test, num_classes = 7)

#create the CNN model
model = Sequential()
model.add(Conv2D(16, (3, 3), activation='relu', input_shape=(75, 100, 3)))
model.add(Conv2D(16, (3,3), activation = 'relu', padding = 'Same' ))
model.add(MaxPool2D((2, 2)))
model.add(Dropout(0.5))
model.add(Conv2D(32, (3,3), activation = 'relu', padding = 'Same' ))
model.add(Conv2D(32, (3,3), activation = 'relu', padding = 'Same' ))
model.add(MaxPool2D(2,2))
model.add(Dropout(0.6))
model.add(Conv2D(64, (3, 3), activation='relu', padding = 'Same'))
model.add(Conv2D(64, (3,3), activation = 'relu', padding = 'Same' ))
model.add(MaxPool2D(2,2))
model.add(Dropout(0.7))
model.add(Flatten())
model.add(Dense(7, activation = 'softmax'))

model.summary()

optimizer = Adam(learning_rate=0.0001)
model.compile(optimizer=optimizer,
              loss='categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(X_train, Y_train_cat, validation_data = (X_test, Y_test_cat), batch_size = 16, validation_batch_size=4, epochs=100, shuffle=True)

loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(loss) + 1)
plt.plot(epochs, loss, 'y', label = "Training loss")
plt.plot(epochs, val_loss, 'r', label = "Validation loss")
plt.title("Training and validation loss")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend()
plt.show()

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
epochs = range(1, len(acc) + 1)
plt.plot(epochs, acc, 'y', label = "Training accuracy")
plt.plot(epochs, val_acc, 'r', label = "Validation accuracy")
plt.title("Training and validation accuracy")
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.show()

#Prediction on dest data
y_pred = model.predict(X_test)
#Convert predictions classes to one hot vector
y_pred_classes = np.argmax(y_pred, axis = 1)
#Convert test data to one hot vectors
y_true = Y_test.tolist()

#Print confusion matrix
cm = confusion_matrix(y_true, y_pred_classes)
fig, ax = plt.subplots(figsize = (15,15))
sns.set(font_scale = 1.6)
sns.heatmap(cm, annot = True, linewidths = .5, ax = ax)

model.save('/content/gdrive/MyDrive/CNN.h5')